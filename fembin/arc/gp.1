#!/bin/sh
#
# shell for gnuplot
#
# 1.31	accepts -grid
# 1.30	accepts -ppp and -sx
# 1.23	accepts -u all
# 1.22	remove parts of legend (option -l)
# 1.21	better conti line treatment, signal error in option
# 1.20	specify x/y range
# 1.10	using different columns
# 1.00	original version

######################################################### defaults

title="Timeseries"
type="monochrome"
orientation="landscape"
terminal="postscript"
using="using 1:2"
grid="NO"
nolegend="xyz*^+="	# something very unlikely
ppp="0"			# plots per page
xfact="1"		# scaling of x axis

######################################################### programs

psgnu="psgnu"
gnuplot="gnuplot"
extractcol="extractcol"
scalecol="scalecol"
range="range"
gpsmerge="gpsmerge"

######################################################### copyright

copy1="File automatically generated by gp"
copy2="gp - shell for gnuplot                 Version 1.23"
copy3="Copyright (c) 1998-1999 Georg Umgiesser - ISDGM/CNR"
copy4="e-mail: georg@isdgm.ve.cnr.it"

######################################################### help - usage

Copy()
{
  echo "$copy2"
  echo "$copy3"
}

Usage()
{
  echo "Usage: gp [ -h | -help ] [ -options ] file[s]"
}

FullUsage()
{
  echo ""

  Copy
  echo ""
  Usage

  echo ""
  echo "Available options:"
  echo "  -h|-help         this help"
  echo "  -c               color output"
  echo "  -png             output in PNG format"
  echo "  -p               portrait mode"
  echo "  -ppp n           put n plots per page (default: all plots)"
  echo "  -grid            plots grid underneath plot"
  echo "  -dot file        plot file with dots"
  echo "  -point file      plot file with points"
  echo "  -u  x:y          using columns x and y for x/y values (Default 1:2)"
  echo "  -u  all          plot all columns"
  echo "  -t  title        give title of plot"
  echo "  -tx xlabel       give x-label of plot"
  echo "  -ty ylabel       give y-label of plot"
  echo "  -rx xmin:xmax    give x-range of plot"
  echo "  -ry ymin:ymax    give y-range of plot"
  echo "  -sx xfact        scale x-coordinate with xfact"
  echo "  -l  string       string that is removed from legend if found"
}

ErrorOption()
{
  echo "No such option : $1"
}

MakeLegend()	#substitutes _ with blank and removes string in $nolegend
{
  echo $1 | sed -e "s/$nolegend//g" | sed -e 's/_/ /g' | sed -e 's/ *$//'
}

Plotting()
{
  echo 'plot \' >> gnu.tmp

   eol=' \'	#end of line
  cont='  '	#continuation of line

  while [ $# -gt 0 ]
  do

    file=$1
    if [ -z "$2" ]; then
      eol=' '
    fi
    legend=`MakeLegend $file`
    line="     \"$file\" $using title \"$legend\"  "
    echo "$cont $line $eol" >> gnu.tmp
    cont=', '

    shift

  done

  echo "" >> gnu.tmp
  echo "quit" >>  gnu.tmp
}

PlotFiles()
{
  cp gnu.tmp gnuhead.tmp
  rm -f out.[1-9]*.ps
  if [ $ppp -eq 0 ]; then
    ppp=$#			#all plots on one page
  fi
  r=`$range $ppp`
  echo "files: $*"
  j=0

  while [ $# -gt 0 ]
  do
    j=`expr $j + 1`
    fnames=""

    for f in $r
    do
      fnames="$fnames $1"
      shift
    done

    echo "$j   $fnames"
    cp gnuhead.tmp gnu.tmp

    Plotting $fnames
    $gnuplot gnu.tmp
    [ $orientation = "landscape" ] && $psgnu out.ps

    mv out.ps out.$j.ps
  done
  $gpsmerge out.[1-9]*.ps > out.ps
}

######################################################### read options

while [ -n "$1" ]
do
   case $1 in
	-c)		type="color";;
	-p)		orientation="portrait";;
	-ppp)		ppp=$2; shift;;
	-grid)		grid="YES";;
	-png)		terminal="png";;
	-u)		using="using $2"; shift;;
	-t)		title=$2; shift;;
	-tx)		xlabel=$2; shift;;
	-ty)		ylabel=$2; shift;;
	-rx)		xrange=$2; shift;;
	-ry)		yrange=$2; shift;;
	-sx)		xfact=$2; shift;;
	-l)		nolegend=$2; shift;;
	-h|-help)	FullUsage; exit 0;;
	-*)		ErrorOption $1; exit 1;;
	*)		break;;
   esac
   shift
done

######################################################### no file -> write help

if [ $# -le 0 ]; then
  Usage
  exit 1;
fi

######################################################### write header

if [ $terminal = "png" ]; then
  orientation="small"
  outfile="out.png"
else
  outfile="out.ps"
fi

cat > gnu.tmp <<EOI

# $copy1
# $copy2
# $copy3
# $copy4

set terminal $terminal $orientation $type
set output "$outfile"

set data style lines
#set data style linespoints
set title "$title"

EOI

######################################################### write defaults

if [ -n "$xlabel" ]; then
  echo "set xlabel \"$xlabel\"" >> gnu.tmp
fi
if [ -n "$ylabel" ]; then
  echo "set ylabel \"$ylabel\"" >> gnu.tmp
fi

if [ -n "$xrange" ]; then
  echo "set xrange [$xrange]" >> gnu.tmp
fi
if [ -n "$yrange" ]; then
  echo "set yrange [$yrange]" >> gnu.tmp
fi

if [ $orientation = "portrait" ]; then
  echo "set size 0.7,0.7" >> gnu.tmp
fi

if [ $grid = "YES" ]; then
  echo "set grid" >> gnu.tmp
fi

echo "" >> gnu.tmp

######################################################### files to plot

files="$*"

######################################################### adjust using command

if [ "$using" = "using all" ]; then
  using="using 1:2"
  if [ $# -gt 1 ]; then
    echo "-u all only with one file"
    exit 1
  fi
  rm -f column.*
  $extractcol -f column $1
  files=`ls column.*`
fi

######################################################### scale plot

if [ $xfact != "1" ]; then
  nfiles=""
  for file in $files
  do
    nfile=${file}_
    #echo "$file  ->  $nfile"
    $scalecol -s $xfact $file > $nfile
    nfiles="$nfiles $nfile"
  done
  files=$nfiles
fi

######################################################### 

PlotFiles $files

######################################################### end

