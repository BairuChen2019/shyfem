#!/usr/bin/perl -ws
#
# computes average
#
# -move=m	computes moving average over m data, else arithmetic average
# -col=c	averages only column c, else all columns
# -fact=f	multiplies columns with f
# -sum		computes total and not average
#
#------------------------------------------------------------------

use warnings;
use strict;

# handle options

$::move = 0 unless $::move;
$::col = 0 unless $::col;
$::fact = 0 unless $::fact;
$::sum = 0 unless $::sum;

my @files = @ARGV;
my $nfiles = @files;
print STDERR "total number of files: $nfiles\n" if $nfiles > 1;

my $total = 0;

if( $::move ) {
    my @new = <>;
    my @cols = read_cols(\@new);
    print STDERR "computing moving average with $::move\n";
    $cols[1] = maver($::move,$cols[1]);
    print_cols(@cols);
} else {
    my @new = <>;
    my @cols = read_cols(\@new);
    my $n = @cols;
    if( $::col ) {
      my $aver = aver($cols[$::col]);
      print "$aver ";
    } else {
      for(my $i=1;$i<$n;$i++) {
        my $aver = aver($cols[$i]);
        print "$aver ";
      }
    }
    print "\n";
}

###############################################################

sub aver
{
    my $ra = shift;

    my $total = 0;
    my $n = 0;

    foreach (@$ra) {
	$n++;
	$total += $_;
    }

    if( not $::sum ) {
      $total = $total / $n if $n;
    }

    return $total;
}

###############################################################

sub maver
{
    my ($move,$ra) = @_;

    my $n = @$ra;
    my $n1 = $n - 1;

    my @new = ();

    for(my $i=0;$i<$n;$i++) {
      #print STDERR "moving average $i\n" if $i%100 == 0;
      my $low = $i - $move;
      $low = 0 if $low < 0;
      my $high = $i + $move;
      $high = $n1 if $high > $n1;
      my $m = 0;
      my $v = 0;
      #print STDERR "moving average $i ($low,$high)\n" if $i%100 == 0;
      for(my $j=$low;$j<=$high;$j++) {
	$m++;
	$v += $$ra[$j];
      }
      $v /= $m if $m;
      #print STDERR "moving average $i ($low,$high) $m -> $v\n" if $i%100 == 0;
      push(@new,$v);
    }

    return \@new;
}

###############################################################

sub print_cols
{
    my @cols = @_;

    my $col = $cols[0];
    my $nrows = @$col;

    for(my $i=0;$i<$nrows;$i++) {
      foreach $col (@cols) {
        my $value = $$col[$i];
        print "$value ";
      }
      print "\n";
    }
}


###############################################################

sub read_cols
{
    my $lines = shift;

    my @cols = ();

    foreach (@$lines) {
	s/^\s+//;
	my @f = split;
        my $ncols = @f;
        for(my $i=0;$i<$ncols;$i++) {
          my $ra = $cols[$i];
	  unless( $ra ) {
            my @new = ();
	    $cols[$i] = \@new;
            $ra = $cols[$i];
	  }
	  $f[$i] *= $::fact if $i > 0 and $::fact != 0;
          push(@$ra,$f[$i]);
        }
    }

    return @cols;
}

###############################################################

